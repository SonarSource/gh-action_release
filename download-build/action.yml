---
name: 'Download build'
description: 'Download all artifacts and checksums of a build'
inputs:
  dryRun:
    description: Flag to enable the dry-run execution
    default: 'false'
    required: false
  local-repo-dir:
    description: 'Empty directory to store the artifacts'
    required: true
  remote-repo:
    description: 'Repository to download from'
    required: true
    default: 'sonarsource-public-releases'
  build-number:
    description: 'Build number'
    required: true
  project-name:
    description: 'Project name for build info (defaults to repository name)'
    required: false
    default: ''
  filter:
    description: 'Path to the artifacts to download'
    required: false
    default: ''
  exclusions:
    description: 'Exclude pattern from downloaded files'
    required: false
    default: '-'
  flat-download:
    description: 'Set to true if you do not wish to have the Artifactory repository path structure created locally for your downloaded files'
    required: false
    default: 'false'
  download-checksums:
    description: 'Set to false if you want to skip downloading the checksums'
    required: false
    default: 'true'
outputs:
  jfrog_dl_options:
    description: Indicate which extra command is passed to jfrog for download
    value: ${{ steps.define-download-options.outputs.jfrog_dl_options }}
runs:
  using: 'composite'
  steps:
    - name: Define download options
      id: define-download-options
      shell: bash
      run: |
        ARGS="--exclusions ${{ inputs.exclusions }}"

        if [ ${{ inputs.dryRun }} = 'true' ]; then
            ARGS="$ARGS --dry-run=true"
        fi

        if [ ${{ inputs.flat-download }} = 'true' ]; then
            ARGS="$ARGS --flat"
        fi
        echo "jfrog_dl_options=$(echo $ARGS)" >> "$GITHUB_OUTPUT"
    - name: Print download options
      run: |
        echo "JFrog download options: ${{ steps.define-download-options.outputs.jfrog_dl_options }}"
      shell: bash
    - name: Download artifacts
      if: ${{ inputs.dryRun != 'true' }}
      shell: bash
      working-directory: ${{ inputs.local-repo-dir }}
      env:
        JFROG_DL_BUILD: ${{ inputs.project-name != '' && inputs.project-name || github.event.repository.name }}/${{ inputs.build-number }}
        JFROG_DL_EXCLUSIONS: ${{ inputs.exclusions }}
        JFROG_DL_REMOTE_REPO: ${{ inputs.remote-repo }}
        FILTER: ${{ inputs.filter }}
      run: |
        if [ -n "$FILTER" ]; then
          JFROG_DL_REMOTE_REPO="${JFROG_DL_REMOTE_REPO}/$FILTER/"
        fi
        echo "$JFROG_DL_REMOTE_REPO"
        jfrog rt download \
          --fail-no-op ${{ steps.define-download-options.outputs.jfrog_dl_options }} \
          --build "${JFROG_DL_BUILD}" \
          "${JFROG_DL_REMOTE_REPO}"
    - name: Download checksums
      if: ${{ inputs.dryRun != 'true' && inputs.download-checksums == 'true' }}
      shell: bash
      working-directory: ${{ inputs.local-repo-dir }}
      env:
        JFROG_DL_REMOTE_REPO: ${{ inputs.remote-repo }}
      run: >
        find . -type f
        -not \( -name "*.asc" -or -name "*.md5" -or -name "*.sha1" -or -name "*.sha256" \)
        -exec jfrog rt curl "${JFROG_DL_REMOTE_REPO}/{{}}.{md5,sha1,sha256}" --output "#1.#2" \;
