# yamllint disable rule:line-length
---
name: Release
on:
  workflow_call:
    inputs:
      dryRun:
        type: boolean
        description: Flag to enable the dry-run execution
        default: false
        required: false
      publishToBinaries:
        type: boolean
        description: Flag to enable the publication to binaries
        default: false
        required: false
      binariesS3Bucket:
        type: string
        description: Target bucket
        default: downloads-cdn-eu-central-1-prod
        required: false
      slackChannel:
        type: string
        description: Channel to post notifications
        default: build
        required: false
      vaultAddr:
        type: string
        description: Custom vault installation
        default: https://vault.sonar.build:8200
        required: false
      artifactoryRoleSuffix:
        type: string
        description: Artifactory promoter suffix specified in Vault repo config
        default: promoter
        required: false
      mavenCentralSync:
        type: boolean
        description: Enable synchronization to Maven Central
        default: false
        required: false
      mavenCentralSyncExclusions:
        type: string
        description: exclusions for the jfrog build download
        default: "-"
        required: false

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # to authenticate via OIDC
      contents: write  # to revert a github release
    timeout-minutes: 30
    if: ${{ inputs.dryRun == true || github.event_name == 'release' && github.event.action == 'published' }}
    outputs:
      releasability: ${{ steps.release.outputs.releasability }}
      promote: ${{ steps.release.outputs.promote }}
      publish_to_binaries: ${{ steps.release.outputs.publish_to_binaries }}
      release: ${{ steps.release.outputs.release }}
    steps:
      - name: Vault Secrets
        id: secrets
        if: ${{ inputs.dryRun != true }}
        uses: SonarSource/vault-action-wrapper@f148a1075c1eff1db5ab474f96c206c5587172d3  # tag=2.5.0-3
        with:
          url: ${{ inputs.vaultAddr }}
          secrets: |
            development/artifactory/token/{REPO_OWNER_NAME_DASH}-${{ inputs.artifactoryRoleSuffix }} access_token | artifactory_access_token;
            development/kv/data/slack token | slack_api_token;
            development/kv/data/repox url | artifactory_url;
            development/kv/data/burgr github_username | burgrx_username;
            development/kv/data/burgr github_password | burgrx_password;
            development/aws/sts/downloads access_key | binaries_aws_access_key_id;
            development/aws/sts/downloads secret_key | binaries_aws_secret_access_key;
            development/aws/sts/downloads security_token | binaries_aws_security_token;
      - name: Parse Vault Output
        id: parse_vault
        env:
          DUMMY_VALUES: ${{ inputs.dryRun }}
          ACTION_OUTPUTS: ${{ toJson(steps.secrets.outputs) }}
        run: |
          if [[ "${DUMMY_VALUES}" == "true" ]]; then
            {
              echo "artifactory_access_token=test"
              echo "burgrx_username=test"
              echo "burgrx_password=test"
              echo "slack_api_token=test"
              echo "binaries_aws_access_key_id=test"
              echo "binaries_aws_secret_access_key=test"
              echo "binaries_aws_security_token=test"
            } >> "${GITHUB_OUTPUT}"
            exit 0
          fi
          echo "${ACTION_OUTPUTS}" | jq -r '.vault | fromjson | to_entries[] | (.key + "<<EOF\n" + .value + "\nEOF")' >> "${GITHUB_OUTPUT}"
      - name: Release
        id: release
        uses: SonarSource/gh-action_release/main@c08ed43ac288fd9850a07521e63157b53cad9296 # 5.1.1
        with:
          publish_to_binaries: ${{ inputs.publishToBinaries }}  # Used only if the binaries are delivered to customers
          slack_channel: ${{ inputs.slackChannel }}
          dry_run: ${{ inputs.dryRun }}
        env:
          PYTHONUNBUFFERED: 1
          ARTIFACTORY_ACCESS_TOKEN: ${{ steps.parse_vault.outputs.artifactory_access_token }}
          BINARIES_AWS_DEPLOY: ${{ inputs.binariesS3Bucket }}  # Required for pushing the binaries
          BURGRX_USER: ${{ steps.parse_vault.outputs.burgrx_username }}
          BURGRX_PASSWORD: ${{ steps.parse_vault.outputs.burgrx_password }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_API_TOKEN: ${{ steps.parse_vault.outputs.slack_api_token }}
          AWS_ACCESS_KEY_ID: ${{ steps.parse_vault.outputs.binaries_aws_access_key_id }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.parse_vault.outputs.binaries_aws_secret_access_key }}
          AWS_SESSION_TOKEN: ${{ steps.parse_vault.outputs.binaries_aws_security_token }}
          AWS_DEFAULT_REGION: eu-central-1
      - name: Release action results
        if: always()
        run: |
          echo "${{ steps.release.outputs.releasability }}"
          echo "${{ steps.release.outputs.promote }}"
          echo "${{ steps.release.outputs.publish_to_binaries }}"
          echo "${{ steps.release.outputs.release }}"

  mavenCentral:
    name: Maven Central
    needs: release
    if: ${{ inputs.mavenCentralSync && inputs.dryRun != true }}
    uses: ./.github/workflows/maven-central.yaml
    with:
      vaultAddr: ${{ inputs.vaultAddr }}
      artifactoryRoleSuffix: ${{ inputs.artifactoryRoleSuffix }}
      downloadExclusions: ${{ inputs.mavenCentralSyncExclusions }}
