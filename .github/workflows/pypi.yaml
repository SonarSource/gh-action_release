name: PyPI
"on":
  workflow_call:
    inputs:
      version:
        type: string
        description: Version (alternative to release event)
        required: false
      vaultAddr:
        type: string
        description: Custom Vault installation
        default: https://vault.sonar.build:8200
        required: false
      vaultTokenKey:
        type: string
        description: Vault key to read the token from
        default: pypi
        required: false
      artifactoryRoleSuffix:
        type: string
        description: Artifactory reader suffix specified in vault repo config
        default: private-reader
        required: false
      downloadExclusions:
        type: string
        description: exclusions for the JFrog build download
        default: "-"
        required: false
      pypiRepoUrl:
        type: string
        description: PyPI Repository URL for publishing the package
        default: https://upload.pypi.org/legacy/
        required: false
      slackChannel:
        type: string
        description: Slack channel to post notifications
        default: build
        required: false

jobs:
  pypi:
    name: Publish to PyPI
    runs-on: github-ubuntu-latest-s
    permissions:
      id-token: write  # to authenticate via OIDC
      contents: read  # to revert a GitHub release
    timeout-minutes: 30
    if: ${{ (github.event_name == 'release' && github.event.action == 'published') || inputs.version != '' }}
    steps:
      - name: Get the version
        id: get_version
        run: |
          IFS=. read -r major minor patch build <<< "${{ inputs.version || github.event.release.tag_name }}"
          echo "build=${build}" >> $GITHUB_OUTPUT
          echo "patch=${patch}" >> $GITHUB_OUTPUT
          echo "minor=${minor}" >> $GITHUB_OUTPUT
          echo "major=${major}" >> $GITHUB_OUTPUT
      - name: Create local repository directory
        id: local_repo
        run: echo "dir=$(mktemp -d repo.XXXXXXXX)" >> $GITHUB_OUTPUT
      - name: Vault
        id: secrets
        uses: SonarSource/vault-action-wrapper@d6d745ffdbc82b040df839b903bc33b5592cd6b0 # 3.0.2
        with:
          url: ${{ inputs.vaultAddr }}
          secrets:
            development/artifactory/token/{REPO_OWNER_NAME_DASH}-${{ inputs.artifactoryRoleSuffix }} access_token  | artifactory_access_token;
            development/kv/data/${{ inputs.vaultTokenKey }} token | pypi_token;
            development/kv/data/slack webhook | slack_webhook;
      - name: Setup JFrog
        uses: SonarSource/jfrog-setup-wrapper@e0f353c7f1bcc7b2f663063d72b5fec7948f6815 # 3.6.0
        with:
          jfrogAccessToken: ${{ fromJSON(steps.secrets.outputs.vault).artifactory_access_token }}
      - name: Download Artifacts
        uses: SonarSource/gh-action_release/download-build@eeb56e18e49c8efc5174ccc194fea8204e06f0ed
        with:
          build-number: ${{ steps.get_version.outputs.build }}
          local-repo-dir: ${{ steps.local_repo.outputs.dir }}
          exclusions: ${{ inputs.downloadExclusions }}
          remote-repo: sonarsource-pypi-public-releases
          flat-download: true
          download-checksums: false
      - name: Publish to PyPI
        id: publish-pypi
        continue-on-error: true
        uses: pypa/gh-action-pypi-publish@76f52bc884231f62b9a034ebfe128415bbaabdfc # v1.12.4
        with:
          packages-dir: ${{ steps.local_repo.outputs.dir }}
          password: ${{ fromJSON(steps.secrets.outputs.vault).pypi_token }}
          repository-url: ${{ inputs.pypiRepoUrl }}
          print-hash: true
      - name: Notify on failure
        if: ${{ failure() }}
        uses: 8398a7/action-slack@1750b5085f3ec60384090fb7c52965ef822e869e # v3.18.0
        with:
          status: failure
          fields: repo,author,eventName
          channel: ${{ inputs.slackChannel }}
        env:
          SLACK_WEBHOOK_URL: ${{ fromJSON(steps.secrets.outputs.vault).slack_webhook }}
      - name: Exit with error
        if: ${{ failure() }}
        run: exit 1
